name: Custom Build
run-name: WSA ${{ inputs.release_type }} Channel with ${{ inputs.root_sol }} and ${{ inputs.gapps_brand }}
on:
  workflow_dispatch:
    inputs:
      arch:
        type: choice
        description: Target CPU architecture of WSA.
        required: true
        options: [x64, arm64, Both]
        default: Both
      release_type:
        type: choice
        description: WSA Release Channel
        required: true
        options: ["Retail","Release Preview","Insider Slow","Insider Fast","Insider Private"]
        default: "Retail"
      user_code:
        type: string
        description: User code for WSA Insider User (Optional)
        required: false
        default: ""
      root_sol:
        type: choice
        description: Root solution
        required: true
        options: ["Non-root","KernelSU","Magisk Stable","Magisk Beta","Magisk Canary","Magisk Debug","Magisk Alpha (vvb2060)","Magisk Delta (HuskyDG)"]
        default: "Magisk Stable"
      gapps_brand:
        type: choice
        description: Google Apps brand
        required: true
        options: ["MindTheGapps v13.0","No GApps"]
        default: "MindTheGapps v13.0"
      compression:
        type: choice
        description: Compression format.
        required: true
        options: [".zip",".7z",".tar.xz"]
        default: ".7z"
      remove_amazon:
        description: "Remove Amazon Appstore from the system"
        required: true
        default: true
        type: boolean

jobs:
  matrix:
    if: github.event.repository.fork == false
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate build matrix
        id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            let matrix = {};
            let arch = "${{ github.event.inputs.arch }}"
            switch ( arch ) {
              case "x64":
                matrix.arch = ["x64"];
                break;
              case "arm64":
                matrix.arch = ["arm64"];
                break;
              default:
                matrix.arch = ["x64", "arm64"];
                break;
            }
            core.setOutput("matrix",JSON.stringify(matrix));
  custbuild:
    name: Build WSA
    runs-on: ubuntu-latest
    needs: matrix
    strategy:
      matrix: ${{fromJson(needs.matrix.outputs.matrix)}}
    steps:
      - name: Checkout ♻️
        uses: actions/checkout@v3
      
      - name: Get WSA Insider Preview build 🏭
        if: ${{ inputs.release_type == 'Insider Private'}}
        shell: python
        run: |
          import requests
          import os
          import json
          import sys
          env_file = os.getenv('GITHUB_ENV')
          res = json.loads(requests.get(f"https://api.github.com/repos/YT-Advanced/WSAPackage/releases/latest").content)['assets']
          for str in res:
              with open(env_file, "a") as wr:
                  wr.write("LINK=" + str['browser_download_url'])
              
      - name: Setup Python 👷
        uses: actions/setup-python@v4
        with:
          check-latest: true
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: scripts/

      - name: Setup Python3 Virtual Enviroment 🐍
        working-directory: scripts
        run: |
          sudo apt-get update
          PYTHON_VENV_DIR="$(dirname "$PWD")/python3-env"
          python3 -m venv "$PYTHON_VENV_DIR" || abort "Failed to create python3 virtual env"
          # shellcheck disable=SC1091
          source "$PYTHON_VENV_DIR/bin/activate" || abort "Failed to activate python3 virtual env"
          python3 -c "import pkg_resources; pkg_resources.require(open('requirements.txt',mode='r'))" &>/dev/null || {
              echo "Installing Python3 dependencies"
              python3 -m pip install --upgrade -r requirements.txt || abort "Failed to install python3 dependencies"
          }
          deactivate
          
      - name: Install Ubuntu Dependencies 🧑‍🏭
        uses: sn-o-w/cache-apt-pkgs-action@master
        with:
          packages: ca-certificates patchelf e2fsprogs aria2 p7zip-full attr unzip xz-utils qemu-utils python3-venv lzip
          version: 1.0
      
      - name: Download WSA Preview build + VCLibs 14 + UI XAML manually 🧙🏻‍♂️
        if: ${{ inputs.release_type == 'Insider Private'}}
        run: |
          wget -P ./download/wsa ${{ env.LINK }}
          mv ./download/wsa/*.Msixbundle ./download/wsa-WIF.zip
          rm -rf ./download/wsa
          wget -P ./download/ https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx
          mv ./download/Microsoft.VCLibs.x64.14.00.Desktop.appx ./download/Microsoft.VCLibs.140.00.UWPDesktop_x64.appx
          wget -P ./download/ https://raw.githubusercontent.com/M1k3G0/Win10_LTSC_VP9_Installer/master/Microsoft.VCLibs.140.00_14.0.30704.0_x64__8wekyb3d8bbwe.appx
          mv ./download/Microsoft.VCLibs.140.00_14.0.30704.0_x64__8wekyb3d8bbwe.appx ./download/Microsoft.VCLibs.140.00_x64.appx
          wget -P ./download/xaml https://globalcdn.nuget.org/packages/microsoft.ui.xaml.2.8.3.nupkg
          7z x ./download/xaml/*.nupkg -o./download/xaml/
          mv ./download/xaml/tools/AppX/x64/Release/*.appx ./download/Microsoft.UI.Xaml.2.8_x64.appx
          rm -rf ./download/xaml

      - name: Build WSA 🏗️
        id: wsa
        run: |
          declare -A opts=( ["RELEASE_TYPE,Retail"]="retail" ["RELEASE_TYPE,Release Preview"]="RP" ["RELEASE_TYPE,Insider Slow"]="WIS" ["RELEASE_TYPE,Insider Fast"]="WIF" ["ROOT_SOL,Magisk Stable"]="stable" ["ROOT_SOL,Magisk Beta"]="beta" ["ROOT_SOL,Magisk Canary"]="canary" ["ROOT_SOL,Magisk Debug"]="debug" ["ROOT_SOL,Magisk Delta (HuskyDG)"]="delta" ["ROOT_SOL,Magisk Alpha (vvb2060)"]="alpha" ["ROOT_SOL,KernelSU"]="kernelsu" ["ROOT_SOL,Non-root"]="none" ["GAPPS_BRAND,MindTheGapps v13.0"]="MindTheGapps" ["GAPPS_BRAND,No GApps"]="none" ["REMOVE_AMAZON,true"]="--remove-amazon" ["COMPRESSION,.zip"]="zip" ["COMPRESSION,.7z"]="7z" ["COMPRESSION,.tar.xz"]="xz" )
          if [[ "${{ inputs.root_sol }}" == *Magisk* ]]; then
              MAGISK_VER="${opts[ROOT_SOL,${{ inputs.root_sol }}]}"
              ROOT_SOL="magisk"
          else
              ROOT_SOL="${opts[ROOT_SOL,${{ inputs.root_sol }}]}"
              MAGISK_VER="${opts[ROOT_SOL,Magisk Stable]}"
          fi
          mkdir -p download
          echo -e "user_code=$(cat $GITHUB_EVENT_PATH | jq -r '.inputs.user_code')" > download/.ms_account
          
          if [[ "${{ inputs.release_type }}" == *Private* ]]; then
              ./scripts/build.sh --arch ${{ matrix.arch }} --release-type WIF --magisk-ver $MAGISK_VER --gapps-brand ${opts[GAPPS_BRAND,${{ inputs.gapps_brand }}]} --skip-download-wsa --root-sol $ROOT_SOL --compress-format ${opts[COMPRESSION,${{ inputs.compression }}]} ${opts[REMOVE_AMAZON,${{ inputs.remove_amazon }}]}
          else
              ./scripts/build.sh --arch ${{ matrix.arch }} --release-type ${opts[RELEASE_TYPE,${{ inputs.release_type }}]} --magisk-ver $MAGISK_VER --gapps-brand ${opts[GAPPS_BRAND,${{ inputs.gapps_brand }}]} --root-sol $ROOT_SOL --compress-format ${opts[COMPRESSION,${{ inputs.compression }}]} ${opts[REMOVE_AMAZON,${{ inputs.remove_amazon }}]}
          fi
          
      - name: File Checksum ✔️
        working-directory: output
        run: |
          sha256sum '${{ steps.wsa.outputs.artifact }}${{ inputs.compression }}' >> sha256-checksum.txt

      - name: Upload Artifact 🤌
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.wsa.outputs.artifact }}
          path: output
