name: Custom Build
run-name: WSA ${{ inputs.release_type }} ${{ inputs.arch }} with ${{ inputs.root_sol }} and ${{ inputs.gapps_brand }} as ${{ inputs.custom_model }}
on:
  workflow_dispatch:
    inputs:
      arch:
        type: choice
        description: Target CPU architecture of WSA.
        required: true
        options: [x64, arm64]
        default: x64
      release_type:
        type: choice
        description: WSA Release Channel
        required: true
        options: ["Retail","Release Preview","Insider Slow","Insider Fast","Insider Private"]
        default: "Retail"
      user_code:
        type: string
        description: User code for WSA Insider User (Optional)
        required: false
        default: ""
      root_sol:
        type: choice
        description: Root solution
        required: true
        options: ["Non-root","KernelSU","Magisk Stable","Magisk Beta","Magisk Canary","Magisk Debug","Magisk Alpha (vvb2060)","Magisk Delta (HuskyDG)"]
        default: "Magisk Stable"
      gapps_brand:
        type: choice
        description: Google Apps brand
        required: true
        options: ["MindTheGapps v13.0","No GApps"]
        default: "MindTheGapps v13.0"
      custom_model:
        type: choice
        description: Custom model
        required: true
        options: ["WSA Default", "Pixel 4a", "Pixel 4a (5G)", "Pixel 5", "Pixel 5a", "Pixel 6", "Pixel 6 Pro", "Pixel 6a", "Pixel 7", "Pixel 7 Pro", "Pixel 7a", "Pixel Tablet", "Pixel Fold"]
        default: "Pixel 5"
      compression:
        type: choice
        description: Compression format.
        required: true
        options: [".zip",".7z"]
        default: ".7z"
      remove_amazon:
        description: "Remove Amazon Appstore from the system"
        required: true
        default: true
        type: boolean

jobs:
  build:
    name: Build WSA
    runs-on: ubuntu-latest
    if: github.event.repository.fork == false
    steps:
      - name: Checkout ♻️
        uses: actions/checkout@v4

      - name: Setup Python 👷
        uses: actions/setup-python@v4
        with:
          check-latest: true
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: scripts/

      - name: Setup Python3 Virtual Enviroment 🐍
        working-directory: scripts
        run: |
          sudo apt-get update
          PYTHON_VENV_DIR="$(dirname "$PWD")/python3-env"
          python3 -m venv "$PYTHON_VENV_DIR" || abort "Failed to create python3 virtual env"
          # shellcheck disable=SC1091
          source "$PYTHON_VENV_DIR/bin/activate" || abort "Failed to activate python3 virtual env"
          python3 -c "import pkg_resources; pkg_resources.require(open('requirements.txt',mode='r'))" &>/dev/null || {
              echo "Installing Python3 dependencies"
              python3 -m pip install --upgrade -r requirements.txt || abort "Failed to install python3 dependencies"
          }
          deactivate

      - name: Install Ubuntu Dependencies 🧑‍🏭
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: e2fsprogs attr unzip qemu-utils python3-venv
          version: 1.0

      - name: Build WSA 🏗️
        id: wsa
        run: |
          declare -A opts=( ["RELEASE_TYPE,Retail"]="retail" ["RELEASE_TYPE,Release Preview"]="RP" ["RELEASE_TYPE,Insider Slow"]="WIS" ["RELEASE_TYPE,Insider Fast"]="WIF" ["RELEASE_TYPE,Insider Private"]="latest" ["ROOT_SOL,Magisk Stable"]="stable" ["ROOT_SOL,Magisk Beta"]="beta" ["ROOT_SOL,Magisk Canary"]="canary" ["ROOT_SOL,Magisk Debug"]="debug" ["ROOT_SOL,Magisk Delta (HuskyDG)"]="delta" ["ROOT_SOL,Magisk Alpha (vvb2060)"]="alpha" ["ROOT_SOL,KernelSU"]="kernelsu" ["ROOT_SOL,Non-root"]="none" ["GAPPS_BRAND,MindTheGapps v13.0"]="MindTheGapps" ["GAPPS_BRAND,No GApps"]="none" ["CUSTOM_MODEL,WSA Default"]="none" ["CUSTOM_MODEL,Pixel 4a"]="sunfish" ["CUSTOM_MODEL,Pixel 4a (5G)"]="bramble" ["CUSTOM_MODEL,Pixel 5"]="redfin" ["CUSTOM_MODEL,Pixel 5a"]="barbet" ["CUSTOM_MODEL,Pixel 6 Pro"]="raven" ["CUSTOM_MODEL,Pixel 6"]="oriole" ["CUSTOM_MODEL,Pixel 6a"]="bluejay" ["CUSTOM_MODEL,Pixel 7"]="panther" ["CUSTOM_MODEL,Pixel 7 Pro"]="cheetah" ["CUSTOM_MODEL,Pixel 7a"]="lynx" ["CUSTOM_MODEL,Pixel Tablet"]="tangorpro" ["CUSTOM_MODEL,Pixel Fold"]="felix" ["REMOVE_AMAZON,true"]="--remove-amazon" ["COMPRESSION,.zip"]="zip" ["COMPRESSION,.7z"]="7z" )

          if [[ "${{ inputs.root_sol }}" == *Magisk* ]]; then
              MAGISK_VER="${opts[ROOT_SOL,${{ inputs.root_sol }}]}"
              ROOT_SOL="magisk"
          else
              ROOT_SOL="${opts[ROOT_SOL,${{ inputs.root_sol }}]}"
              MAGISK_VER="${opts[ROOT_SOL,Magisk Stable]}"
          fi

          mkdir -p download
          echo -e "user_code=$(cat $GITHUB_EVENT_PATH | jq -r '.inputs.user_code')" > download/.ms_account
          ./scripts/build.sh --arch ${{ inputs.arch }} --release-type ${opts[RELEASE_TYPE,${{ inputs.release_type }}]} --magisk-ver $MAGISK_VER --gapps-brand ${opts[GAPPS_BRAND,${{ inputs.gapps_brand }}]} --custom-model ${opts[CUSTOM_MODEL,${{ inputs.custom_model }}]} --root-sol $ROOT_SOL --compress-format ${opts[COMPRESSION,${{ inputs.compression }}]} ${opts[REMOVE_AMAZON,${{ inputs.remove_amazon }}]}

      - name: File Checksum ✔️
        if: inputs.compression != '.zip'
        working-directory: output
        run: sha256sum '${{ steps.wsa.outputs.artifact }}${{ inputs.compression }}' > sha256-checksum.txt

      - name: Upload Artifact 📦
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.wsa.outputs.artifact }}-compressed
          path: output
